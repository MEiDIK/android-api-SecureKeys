apply plugin: 'com.android.application'
apply plugin: 'saantiaguilera.securekeys'

android {
    compileSdkVersion project.targetApiLevel.toInteger()
    buildToolsVersion project.androidBuildToolsVersion

    defaultConfig {
        minSdkVersion project.minApiLevel
        targetSdkVersion project.targetApiLevel
        versionName libraryVersion
        applicationId "com.u.testapp"
    }
    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            // Dont put here sensible data, the attacker can see it unencrypted in the BuildConfig file later!!
            // If your app has Proguard (and you do remove the BuildConfig fields), then its no problem at all.
            buildConfigField "String", "TESTING_VALUE_1", "\"5000\""
            buildConfigField "String", "TESTING_VALUE_2", "\"3.1415\""
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            // Dont put here sensible data, the attacker can see it unencrypted in the BuildConfig file later!!
            // If your app has Proguard (and you do remove the BuildConfig fields), then its no problem at all.
            buildConfigField "String", "TESTING_VALUE_1", "\"5000\""
            buildConfigField "String", "TESTING_VALUE_2", "\"3.1415\""
        }
    }
}

/**
 * This is so that we can use the :core module locally
 * Since gradle when compiling local projects gets the
 * sources from the bundle on his own and not the aar :(
 */
task copyCoreAar() {
    fileTree("libs/").filter { it.isFile() }.files.each { file ->
        file.delete()
    }

    def aarFileRelease = project.rootProject.subprojects.find { it.name == 'core' }.file('build/outputs/aar/core-release.aar')

    if (aarFileRelease.exists()) {
        project.copy {
            from aarFileRelease.absolutePath
            into 'libs/'
        }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile support.appcompat

    // For using the published ones:
    // compile me.core
    // annotationProcessor me.processor

    if (project.file('libs/core-release.aar').exists()) {
        compile (name: 'core-release', ext: 'aar')
        compile project(path: ':annotation')
        annotationProcessor project(path:':processor')
    } else {
        println "Please run first core:assembleRelease before using the testapp"
    }
}
